/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module downcounterOneDigit (
  input EN,
  input LOAD,
  input [3:0] IN,
  input CLK,
  input RESET,
  output [3:0] CNT,
  output ZERO
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire [1:0] s17;
  wire [1:0] s18;
  wire [1:0] s19;
  wire [1:0] s20;
  wire s21;
  wire s22;
  wire s23;
  assign s4 = ~ RESET;
  assign s17[0] = EN;
  assign s17[1] = LOAD;
  assign s0 = IN[0];
  assign s1 = IN[1];
  assign s2 = IN[2];
  assign s3 = IN[3];
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i0 (
    .Set( s4 ),
    .D( s5 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s6 ),
    .\~Q ( s7 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i1 (
    .Set( s4 ),
    .D( s8 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s9 ),
    .\~Q ( s10 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i2 (
    .Set( s4 ),
    .D( s11 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s12 ),
    .\~Q ( s13 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i3 (
    .Set( s4 ),
    .D( s14 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s15 ),
    .\~Q ( s16 )
  );
  Mux_4x1 Mux_4x1_i4 (
    .sel( s17 ),
    .in_0( s6 ),
    .in_1( s7 ),
    .in_2( s0 ),
    .in_3( s0 ),
    .out( s5 )
  );
  Mux_4x1 Mux_4x1_i5 (
    .sel( s18 ),
    .in_0( s9 ),
    .in_1( s10 ),
    .in_2( s1 ),
    .in_3( s1 ),
    .out( s8 )
  );
  Mux_4x1 Mux_4x1_i6 (
    .sel( s19 ),
    .in_0( s12 ),
    .in_1( s13 ),
    .in_2( s2 ),
    .in_3( s2 ),
    .out( s11 )
  );
  Mux_4x1 Mux_4x1_i7 (
    .sel( s20 ),
    .in_0( s15 ),
    .in_1( s16 ),
    .in_2( s3 ),
    .in_3( s3 ),
    .out( s14 )
  );
  assign s18[0] = s21;
  assign s18[1] = LOAD;
  assign s19[0] = s22;
  assign s19[1] = LOAD;
  assign s20[0] = s23;
  assign s20[1] = LOAD;
  assign s21 = (s7 & EN);
  assign CNT[0] = s6;
  assign CNT[1] = s9;
  assign CNT[2] = s12;
  assign CNT[3] = s15;
  assign s22 = (s10 & s21);
  assign s23 = (s22 & s13);
  assign ZERO = (s16 & s23);
endmodule
